// Code generated by protoc-gen-gogo.
// source: master_sm.proto
// DO NOT EDIT!

/*
	Package paxospb is a generated protocol buffer package.

	It is generated from these files:
		master_sm.proto

	It has these top-level messages:
		MasterOperator
*/
package paxospb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MasterOperator struct {
	Nodeid      uint64 `protobuf:"varint,1,req,name=nodeid" json:"nodeid"`
	Version     uint64 `protobuf:"varint,2,req,name=version" json:"version"`
	Timeout     int32  `protobuf:"varint,3,req,name=timeout" json:"timeout"`
	Operator    uint32 `protobuf:"varint,4,req,name=operator" json:"operator"`
	Sid         uint32 `protobuf:"varint,5,req,name=sid" json:"sid"`
	Lastversion uint64 `protobuf:"varint,6,opt,name=lastversion" json:"lastversion"`
}

func (m *MasterOperator) Reset()                    { *m = MasterOperator{} }
func (m *MasterOperator) String() string            { return proto.CompactTextString(m) }
func (*MasterOperator) ProtoMessage()               {}
func (*MasterOperator) Descriptor() ([]byte, []int) { return fileDescriptorMasterSm, []int{0} }

func (m *MasterOperator) GetNodeid() uint64 {
	if m != nil {
		return m.Nodeid
	}
	return 0
}

func (m *MasterOperator) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MasterOperator) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *MasterOperator) GetOperator() uint32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *MasterOperator) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *MasterOperator) GetLastversion() uint64 {
	if m != nil {
		return m.Lastversion
	}
	return 0
}

func init() {
	proto.RegisterType((*MasterOperator)(nil), "paxospb.MasterOperator")
}
func (m *MasterOperator) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MasterOperator) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintMasterSm(data, i, uint64(m.Nodeid))
	data[i] = 0x10
	i++
	i = encodeVarintMasterSm(data, i, uint64(m.Version))
	data[i] = 0x18
	i++
	i = encodeVarintMasterSm(data, i, uint64(m.Timeout))
	data[i] = 0x20
	i++
	i = encodeVarintMasterSm(data, i, uint64(m.Operator))
	data[i] = 0x28
	i++
	i = encodeVarintMasterSm(data, i, uint64(m.Sid))
	data[i] = 0x30
	i++
	i = encodeVarintMasterSm(data, i, uint64(m.Lastversion))
	return i, nil
}

func encodeFixed64MasterSm(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MasterSm(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMasterSm(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *MasterOperator) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMasterSm(uint64(m.Nodeid))
	n += 1 + sovMasterSm(uint64(m.Version))
	n += 1 + sovMasterSm(uint64(m.Timeout))
	n += 1 + sovMasterSm(uint64(m.Operator))
	n += 1 + sovMasterSm(uint64(m.Sid))
	n += 1 + sovMasterSm(uint64(m.Lastversion))
	return n
}

func sovMasterSm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMasterSm(x uint64) (n int) {
	return sovMasterSm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MasterOperator) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterSm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodeid", wireType)
			}
			m.Nodeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Nodeid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Operator |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Sid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastversion", wireType)
			}
			m.Lastversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Lastversion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterSm(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterSm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nodeid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("version")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timeout")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("operator")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMasterSm(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMasterSm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterSm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMasterSm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMasterSm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMasterSm(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMasterSm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMasterSm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("master_sm.proto", fileDescriptorMasterSm) }

var fileDescriptorMasterSm = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0x2c, 0x2e,
	0x49, 0x2d, 0x8a, 0x2f, 0xce, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0xac,
	0xc8, 0x2f, 0x2e, 0x48, 0x92, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf,
	0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xcb, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98,
	0x05, 0xd1, 0xa7, 0x74, 0x81, 0x91, 0x8b, 0xcf, 0x17, 0x6c, 0x96, 0x7f, 0x41, 0x6a, 0x51, 0x62,
	0x49, 0x7e, 0x91, 0x90, 0x0c, 0x17, 0x5b, 0x5e, 0x7e, 0x4a, 0x6a, 0x66, 0x8a, 0x04, 0xa3, 0x02,
	0x93, 0x06, 0x8b, 0x13, 0xcb, 0x89, 0x7b, 0xf2, 0x0c, 0x41, 0x50, 0x31, 0x21, 0x39, 0x2e, 0xf6,
	0xb2, 0xd4, 0xa2, 0xe2, 0xcc, 0xfc, 0x3c, 0x09, 0x26, 0x24, 0x69, 0x98, 0x20, 0x48, 0xbe, 0x24,
	0x33, 0x37, 0x35, 0xbf, 0xb4, 0x44, 0x82, 0x19, 0x28, 0xcf, 0x0a, 0x93, 0x87, 0x0a, 0x0a, 0x29,
	0x70, 0x71, 0xe4, 0x43, 0x6d, 0x92, 0x60, 0x01, 0x2a, 0xe0, 0x85, 0x2a, 0x80, 0x8b, 0x0a, 0x89,
	0x71, 0x31, 0x17, 0x03, 0x2d, 0x67, 0x45, 0x92, 0x04, 0x09, 0x08, 0xa9, 0x71, 0x71, 0xe7, 0x00,
	0x5d, 0x0a, 0xb3, 0x9d, 0x4d, 0x81, 0x11, 0x6e, 0x3b, 0xb2, 0x84, 0x93, 0xc0, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x80, 0xf8, 0x01, 0x10, 0x4f, 0x78, 0x2c, 0xc7, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x97, 0x6e, 0xad, 0x74, 0x2e, 0x01, 0x00, 0x00,
}
